Objective-C SQL Query Builder

This repository contains two sets of Objective-C based classes that handle a SQLite database.  The DAO folder contains
a class that easily manages the database connection.  The SQL folder contains a collection of SQL builder classes that
can be used to construct well-formed SQL statements for SQLite via a plethora of convenience methods similar to those
found in LINQ.  Each method essentially mimics its SQL equivalent; so, there is almost no learning curve.

All classes were designed to be used in iPhone/iOS applications.

These classes are well-documented.  Unlike other SQLite libraries written in Objective-C, these classes are very cleanly
written and utilize clear naming conventions.  If you find any bugs or have any suggestion on how these classes can be
improved, please drop me a line.

Below are a few examples of how these classes are used in Xcode:

Example #1 (Drop Table)

// Imports the necessary classes
#import "ZIMDaoConnection.h"
#import "ZIMSqlDropTableStatement.h"

// Opens the database connection
ZIMDaoConnection *connection = [[ZIMDaoConnection alloc] initWithDataSource: @"TestDB.sqlite"];

// Creates the SQL statement
ZIMSqlDropTableStatement *drop = [[ZIMSqlDropTableStatement alloc] init];
[drop table: @"Customer"];
NSString *statement = [drop statement];
NSLog(@"%@", statement);

// Executes the SQL statement
[connection execute: statement];

// Closes database connection and releases allocated memory
[drop release];
[connection release];

Example #2 (Delete Record)

// Imports the necessary classes
#import "ZIMDaoConnection.h"
#import "ZIMSqlDeleteStatement.h"

// Opens the database connection
ZIMDaoConnection *connection = [[ZIMDaoConnection alloc] initWithDataSource: @"TestDB.sqlite"];

// Creates the SQL statement
ZIMSqlDeleteStatement *delete = [[ZIMSqlDeleteStatement alloc] init];
[delete table: @"Customer"];
[delete where: @"name" operator: ZIMSqlOperatorEqualTo value: @"Ziminji"];
[delete limit: 1];
NSString *statement = [delete statement];
NSLog(@"%@", statement);

// Executes the SQL statement
[connection execute: statement];

// Closes database connection and releases allocated memory
[delete release];
[connection release];

Example #3 (Insert Record)

// Imports the necessary classes
#import "ZIMDaoConnection.h"
#import "ZIMSqlInsertStatement.h"

// Opens the database connection
ZIMDaoConnection *connection = [[ZIMDaoConnection alloc] initWithDataSource: @"TestDB.sqlite"];

// Creates the SQL statement
ZIMSqlInsertStatement *insert = [[ZIMSqlInsertStatement alloc] init];
[insert table: @"Customer"];
[insert column: @"name" value: @"Ziminji"];
[insert column: @"phone" value: @"555-555-5555"];
NSString *statement = [insert statement];
NSLog(@"%@", statement);

// Executes the SQL statement
[connection execute: statement];

// Closes database connection and releases allocated memory
[insert release];
[connection release];

Example #4 (Select Record)

// Imports the necessary classes
#import "ZIMDaoConnection.h"
#import "ZIMSqlSelectStatement.h"

// Opens the database connection
ZIMDaoConnection *connection = [[ZIMDaoConnection alloc] initWithDataSource: @"TestDB.sqlite"];

// Creates the SQL statement
ZIMSqlSelectStatement *select = [[ZIMSqlSelectStatement alloc] init];
[select column: @"name"];
[select from: @"Customer"];
[select where: @"name" operator: ZIMSqlOperatorEqualTo value: @"Ziminji"];
[select where: @"phone" operator: ZIMSqlOperatorEqualTo value: @"555-555-5555" connector: ZIMSqlConnectorAnd];
[select orderBy: @"name"];
[select groupBy: @"name"];
[select limit: 1];
NSString *statement = [select statement];
NSLog(@"%@", statement);

// Queries using the SQL statement
[connection query: statement];

// Closes database connection and releases allocated memory
[select release];
[connection release];

Example #5 (Update Record)

// Imports the necessary classes
#import "ZIMDaoConnection.h"
#import "ZIMSqlUpdateStatement.h"

// Opens the database connection
ZIMDaoConnection *connection = [[ZIMDaoConnection alloc] initWithDataSource: @"TestDB.sqlite"];

// Creates the SQL statement
ZIMSqlUpdateStatement *update = [[ZIMSqlUpdateStatement alloc] init];
[update table: @"Customer"];
[update column: @"phone" value: @"5555555555"];
[update where: @"name" operator: ZIMSqlOperatorEqualTo value: @"Ziminji"];
[update limit: 1];
NSString *statement = [update statement];
NSLog(@"%@", statement);

// Executes the SQL statement
[connection execute: statement];

// Closes database connection and releases allocated memory
[update release];
[connection release];
